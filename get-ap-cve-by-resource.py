#!/usr/bin/env python3
import http.client
import json
import authenticate
from urllib.parse import urlencode
import csv
import config
from datetime import datetime

def get_alerts(params):
    conn = http.client.HTTPSConnection(config.url)
    query_string = urlencode(params)
    endpoint = f"/alert?{query_string}"
    
    conn.request("GET", endpoint, '', headers)
    res = conn.getresponse()
    data = res.read()
    return json.loads(data.decode("utf-8"))

def get_alert_details(alert_id):
    conn = http.client.HTTPSConnection(config.url)
    endpoint = f"/alert/{alert_id}?detailed=false&withAlertRuleInfo=false"
    
    conn.request("GET", endpoint, '', headers)
    res = conn.getresponse()
    data = res.read()
    return json.loads(data.decode("utf-8"))

def extract_cves(detail):
    try:
        nodes = detail.get("metadata", {}).get("attackPathDetails", {}).get("graph", {}).get("nodes", {})
        cves = []
        for node_id, node_info in nodes.items():
            if node_info.get("nodeType") == "vulnerability":
                cves.append({
                    "id": node_id,
                    "severity": node_info.get("severity", "N/A"),
                    "cvss_score": node_info.get("cvssScore", "N/A")
                })
        return cves
    except Exception as e:
        print(f"Error extracting CVEs: {e}")
        return []

# Initial setup
response = json.loads(authenticate.login())
JWTtoken = response["token"]
headers = {
    'Accept': '*/*',
    'x-redlock-auth': JWTtoken
}

# Step 1: Get all attack path alerts
initial_params = {
    'timeType': 'relative',
    'timeAmount': '12',             # change this value to change the time frame of search
    'timeUnit': 'month',
    'detailed': 'true',
    'policy.type': "attack_path"    # you can also add the field "policy.severity" and set it to "critical", "high", etc

}

attack_path_alerts = get_alerts(initial_params)
alert_details = []
resources_without_cves = []

# Step 2: Process each attack path alert
for alert in attack_path_alerts:
    if "id" not in alert:
        continue
        
    attack_path_id = alert["id"]
    detail = get_alert_details(attack_path_id)
    cves = extract_cves(detail)
    
    if "resource" in detail:
        resource = detail["resource"]
        resource_name = resource.get("name", "N/A")
        
        if not cves:
            resources_without_cves.append(resource_name)
            continue
            
        alert_info = {
            "resource_name": resource_name,
            "resource_id": resource.get("id", "N/A"),
            "attack_path_id": attack_path_id,
            "account_id": resource.get("accountId", "N/A"),
            "cloud_type": resource.get("cloudType", "N/A"),
            "region": resource.get("region", "N/A"),
            "resource_type": resource.get("resourceType", "N/A"),
            "cves": cves
        }
        alert_details.append(alert_info)

# Create CSV filename with timestamp
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
csv_filename = f"prisma_attack_paths_{timestamp}.csv"

# Write to CSV (only resources with CVEs)
with open(csv_filename, 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow([
        'Resource Name', 
        'Resource ID', 
        'Attack Path ID', 
        'Account ID',
        'Cloud Type',
        'Region',
        'Resource Type',
        'CVE ID',
        'CVE Severity'
    ])
    
    for detail in alert_details:
        # Write a new row for each CVE associated with the resource
        for cve in detail["cves"]:
            csvwriter.writerow([
                detail["resource_name"],
                detail["resource_id"],
                detail["attack_path_id"],
                detail["account_id"],
                detail["cloud_type"],
                detail["region"],
                detail["resource_type"],
                cve["id"],
                cve["severity"]
            ])

# Console output
print("\nAttack Path Alert Summary:")
print("==========================")

for detail in alert_details:
    print(f"\nResource: {detail['resource_name']}")
    print(f"Resource ID: {detail['resource_id']}")
    print(f"Attack Path ID: {detail['attack_path_id']}")
    print(f"Account ID: {detail['account_id']}")
    print(f"Cloud Type: {detail['cloud_type']}")
    print(f"Region: {detail['region']}")
    print(f"Resource Type: {detail['resource_type']}")
    print("CVEs:")
    for cve in detail["cves"]:
        print(f"  - {cve['id']} (Severity: {cve['severity']}, CVSS: {cve['cvss_score']})")
    print()

print(f"\nResources without CVEs ({len(resources_without_cves)}):")
print("======================================")
for resource in resources_without_cves:
    print(f"- {resource}")

print(f"\nTotal resources with CVEs: {len(alert_details)}")
print(f"Total resources without CVEs: {len(resources_without_cves)}")
print(f"\nCSV file has been created: {csv_filename}")